import { describe, expect, it } from 'vitest';
import { mount } from '@vue/test-utils';
import type { I{{pascalCase name}}PropTypes } from '~/components/{{pascalCase name}}';
import { {{pascalCase name}} } from '~/components/{{pascalCase name}}';

describe('{{pascalCase name}} Component', () => {

  describe('Component API', () => {
    const props = {}

    it('Should add class when the "class" prop is passed', () => {
      const testClass = '.{{kebabCase name}}';

      const wrapper = mount({{pascalCase name}} as any, {
        props: {
          ...props,
          class: testClass
        }
      });

      expect(wrapper.attributes().class).toContain(testClass);
    });

    it('Should render the {{pascalCase name}} component', () => {
      const wrapper = mount({{pascalCase name}} as any, { props });

      expect(wrapper.exists()).toBe(true);
    });
  });

  describe('Emits', () => {
    it('Should emit the v-model event', async () => {
      const wrapper = mount({{pascalCase name}} as any, { props });
      
      await wrapper.trigger('input');
      
      expect(wrapper.emitted()).toHaveProperty('update:modelValue');
    });
  });

  describe('Slots', () => {
    it('Should render the default slot content', () => {
      const wrapper = mount({{pascalCase name}} as any, {
        props,
        slots: {
          default: '<span class="test-slot">Slot content</span>'
        }
      });

      expect(wrapper.html()).toContain('Slot content');
    });
  });
});
